from telegram import Update
from telegram.ext import filters, ApplicationBuilder, CallbackQueryHandler, ContextTypes, CommandHandler, MessageHandler
from gpt import ChatGptService
from util import (load_message, send_text, send_image, show_main_menu, load_prompt, send_text_buttons, BotMode, QuizCounter)
import logging
import credentials

bot_mode = BotMode()
bot_mode.mode = "default"

# ===============================logging===========================================

logger = logging.getLogger(__name__)
def configure_logging(level):
    logging.basicConfig(
        level=level,
        datefmt = "%Y-%m-%d %H:%M:%S",
        format = "[%(asctime)s] %(module)s:%(lineno)d %(levelname)s %(funcName)s - %(message)s"
    )
configure_logging(level=logging.INFO)

# ===============================start menu code block===========================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("func start started")
    bot_mode.mode = 'default'
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start':'–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
        'random':'–î—ñ–∑–Ω–∞—Ç–∏—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç üß†',
        'gpt':'–ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è —á–∞—Ç—É GPT ü§ñ',
        'talk':'–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é üë§',
        'quiz':'–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É –∫–≤—ñ–∑ ‚ùì',
        'translator':'–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á GPT üìù',
        'image':'–û–ø–∏—Å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è'
    })

# ===============================image recognition code block===========================================

async def image_recognition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("func image_recognition started")
    bot_mode.mode = 'image'
    await send_text(update,context,'–û—á—ñ–∫—É—é –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è')

async def image_send (update: Update, context: ContextTypes.DEFAULT_TYPE,image_url):
    logger.info("func image_send started")
    image_description = await chat_gpt.send_photo(image_url)
    await send_text_buttons(update,context,image_description,{
        'image_quit': '–ó–∞–≤–µ—Ä—à–∏—Ç–∏'
    })

async def image_buttons (update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("func image_buttons started")
    await update.callback_query.answer()
    button = update.callback_query.data
    if button == 'image_quit':
        await start(update, context)

async def photo_handler(update: Update,
                          context: ContextTypes.DEFAULT_TYPE):
    logger.info("func photo_handler started")
    if bot_mode.mode == 'image':
        photo = update.message.photo[0]
        photo_id = photo.file_id
        bot = update.get_bot()
        image = await bot.get_file(photo_id)
        image_url = image.file_path
        await image_send(update,context,image_url)

# ===============================translator code block===========================================

async def translator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot_mode.mode = 'default'
    logger.info("func translator started")
    await send_image(update, context, 'translator')
    await send_text_buttons(update, context, load_message('translator'), {
        'translator_english': '–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞',
        'translator_german': '–ù—ñ–º–µ—Ü—å–∫–∞',
        'translator_french': '–§—Ä–∞–Ω—Ü—É–∑—å–∫–∞',
        'translator_quit': '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–µ–º GPT'
    })
async def translator_next(update: Update, context: ContextTypes.DEFAULT_TYPE,massage):
    logger.info("func translator_next started")
    translated_text = await chat_gpt.add_message(massage)
    await send_text_buttons(update, context,translated_text,{
        'translator_change_language':'–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É',
        'translator_quit':'–ó–∞–≤–µ—Ä—à–∏—Ç–∏'})

async def translator_buttons(update: Update,
                           context: ContextTypes.DEFAULT_TYPE):
    logger.info("func translator_buttons started")
    bot_mode.mode = 'translator'
    await update.callback_query.answer()
    button = update.callback_query.data
    if button == 'translator_english':
        await send_text(update, context, '–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–∞ –æ–±—Ä–∞–Ω—É –º–æ–≤—É')
        chat_gpt.set_prompt(f'{load_prompt('translation')} –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞')
    elif button == 'translator_german':
        await send_text(update, context, '–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–∞ –æ–±—Ä–∞–Ω—É –º–æ–≤—É')
        chat_gpt.set_prompt(f'{load_prompt('translation')} –Ω—ñ–º–µ—Ü—å–∫–∞')
    elif button == 'translator_french':
        await send_text(update, context, '–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–∞ –æ–±—Ä–∞–Ω—É –º–æ–≤—É')
        chat_gpt.set_prompt(f'{load_prompt('translation')} —Ñ—Ä–∞–Ω—Ü—É–∑—å–∫–∞')
    elif button == 'translator_change_language':
        bot_mode.mode = 'default'
        await translator(update,context)
    elif button == 'translator_quit':
        bot_mode.mode = 'default'
        await start(update,context)

# ===============================random fact code block===========================================

async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("func random started")
    bot_mode.mode = 'default'
    await send_image(update, context, 'random')
    await send_text(update, context, load_message('random'))
    random_fact = await chat_gpt.send_question(load_prompt('random'), "–î–∞–π —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç")
    await send_text_buttons(update, context, random_fact, {
        'random_new': "–•–æ—á—É —â–µ —Ñ–∞–∫—Ç",
        'random_start': "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"})

async def random_buttons(update: Update,
                                   context:ContextTypes.DEFAULT_TYPE):
    logger.info("func random_buttons started")
    await update.callback_query.answer()
    query = update.callback_query.data
    if query == 'random_new':
        await random(update, context)
    elif query == 'random_start':
        await start(update, context)

# ===============================gpt question code block===========================================

async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("func gpt started")
    bot_mode.mode = 'gpt'
    await send_image(update, context, 'gpt')
    await send_text(update, context, load_message('gpt'))
    chat_gpt.set_prompt(load_prompt('gpt'))

async def gpt_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question):
    logger.info("func gpt_question started")
    answer = await chat_gpt.add_message(question)
    await send_text_buttons(update, context, answer,{'gpt_quit':'–ó–∞–≤–µ—Ä—à–∏—Ç–∏'})

async def gpt_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("func gpt_buttons started")
    await update.callback_query.answer()
    button = update.callback_query.data
    if button == 'gpt_quit':
        await start(update,context)

# ===============================famous person talk code block===========================================

async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot_mode.mode = "default"
    logger.info("func talk started")
    await send_image(update, context, 'talk')
    await send_text_buttons(update, context, '–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–æ–º—É –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å, –∑ —è–∫–æ—é —Ö–æ—á–µ—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏:', {
        'talk_cb':'–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω - –°–æ–ª—ñ—Å—Ç –≥—É—Ä—Ç—É Nirvana üé∏',
        'talk_qn':'–Ñ–ª–∏–∑–∞–≤–µ—Ç–∞ II - –ö–æ—Ä–æ–ª–µ–≤–∞ –û–±—î–¥–Ω–∞–Ω–æ–≥–æ –ö–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–∞ üëë',
        'talk_jt':'–î–∂–æ–Ω –¢–æ–ª–∫—ñ–Ω - –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏ "–í–æ–ª–æ–¥–∞—Ä –ü–µ—Ä—Å–Ω—ñ–≤" üìñ',
        'talk_fn':'–§—Ä—ñ–¥—Ä—ñ—Ö –ù—ñ—Ü—à–µ - –§—ñ–ª–æ—Å–æ—Ñ üß†',
        'talk_sh':'–°—Ç—ñ–≤–µ–Ω –ì–æ–∫—ñ–Ω–≥ - –§—ñ–∑–∏–∫ üî¨'
    })
async def active_talk(update: Update, context: ContextTypes.DEFAULT_TYPE,message):
    logger.info("func active_talk started")
    await send_text_buttons(update, context, await chat_gpt.add_message(message), {
        'talk_end':'–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É'
    })
async def talk_buttons(update: Update,
                                   context: ContextTypes.DEFAULT_TYPE):
    bot_mode.mode = 'talk'
    logger.info("func talk_buttons started")
    await update.callback_query.answer()
    button = update.callback_query.data
    if button == 'talk_cb':
        chat_gpt.set_prompt(load_prompt('talk_cobain'))
        await send_image(update,context,'talk_cobain')
        await send_text(update, context, '–î–∞–≤–∞–π –ø–æ—Å–ø—ñ–ª–∫—É—î–º–æ—Å—å —á—É–≤–∞—á–µ')
    elif button == 'talk_qn':
        chat_gpt.set_prompt(load_prompt('talk_queen'))
        await send_image(update, context, 'talk_queen')
        await send_text(update, context, '–á—ó –≤–µ–ª–∏—á–Ω—ñ—Å—Ç—å —á–µ–∫–∞—î')
    elif button == 'talk_jt':
        chat_gpt.set_prompt(load_prompt('talk_tolkien'))
        await send_image(update, context, 'talk_tolkien')
        await send_text(update, context, '–î–∂–æ–Ω –∑ —Ä–∞–¥—ñ—Å—Ç—é –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –Ω–∞ —Ç–≤–æ—ó –ø–∏—Ç–∞–Ω–Ω—è')
    elif button == 'talk_fn':
        chat_gpt.set_prompt(load_prompt('talk_nietzsche'))
        await send_image(update, context, 'talk_nietzsche')
        await send_text(update, context, '–§—Ä—ñ–¥—Ä—ñ—Ö –ù—ñ—Ü—à–µ –≥–æ—Ç–æ–≤–∏–π –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º–∏ –ø–æ–≥–ª—è–¥–∞–º–∏')
    elif button == 'talk_sh':
        chat_gpt.set_prompt(load_prompt('talk_hawking'))
        await send_image(update, context, 'talk_hawking')
        await send_text(update, context, '–°—Ç—ñ–≤–µ–Ω –ì–æ–∫—ñ–Ω–≥ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç—å –±–∞–≥–∞—Ç–æ —Ü—ñ–∫–∞–≤–æ–≥–æ, –∑–∞–ø–∏—Ç—É–π')
    elif button == 'talk_end':
        await start(update,context)

# ===============================quiz code block===========================================
quiz_count = QuizCounter()

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot_mode.mode = "default"
    logger.info("func quiz started")
    chat_gpt.set_prompt(load_prompt('quiz'))
    await send_image(update, context, 'quiz')
    await send_text_buttons(update, context, load_message('quiz'), {
        'quiz_prog': 'Quiz –ø–æ –æ—Å–Ω–æ–≤–∞–º –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è',
        'quiz_math': 'Quiz –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏—Ü—ñ',
        'quiz_biology': 'Quiz –ø–æ –±—ñ–æ–ª–æ–≥—ñ—ó',
        'quiz_quit': '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ Quiz'
    })

async def active_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE,message):
    logger.info("func active_quiz started")
    reply = await chat_gpt.add_message(message)
    if reply == "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!":
        quiz_count.questions_count +=1
        quiz_count.wright_answers  +=1
    else:
        quiz_count.questions_count +=1
    await send_text_buttons(update, context, reply, {
        'quiz_more':'–ù–∞—Å—Ç—É–ø–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è',
        'quiz_change':'–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É',
        'quiz_quit':'–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫–≤—ñ–∑'
    })

async def quiz_buttons(update: Update,
                           context: ContextTypes.DEFAULT_TYPE):
    logger.info("func quiz_buttons started")
    bot_mode.mode = 'quiz'
    await update.callback_query.answer()
    button = update.callback_query.data
    if button == 'quiz_prog':
        await send_text(update, context,await chat_gpt.add_message('quiz_prog'))
    elif button == 'quiz_math':
        await send_text(update, context,await chat_gpt.add_message('quiz_math'))
    elif button == 'quiz_biology':
        await send_text(update, context,await chat_gpt.add_message('quiz_biology'))
    elif button == 'quiz_more':
        await send_text(update, context,await chat_gpt.add_message('quiz_more'))
    elif button == 'quiz_change':
        await quiz(update,context)
    elif button == 'quiz_quit':
        await send_text(update, context,
                        f' –ö–≤—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç–∞–Ω—å {quiz_count.questions_count}, –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π {quiz_count.wright_answers}')
        bot_mode.mode = 'default'
        quiz_count.questions_count = 0
        quiz_count.wright_answers = 0

# ===============================common message handler code block===========================================

async def message_handler(update: Update,
                          context: ContextTypes.DEFAULT_TYPE):
    logger.info("func message_handler started")
    message = update.message.text
    if bot_mode.mode == 'gpt':
        await gpt_question(update, context, message)
    elif bot_mode.mode == 'quiz':
        await active_quiz(update,context, message)
    elif bot_mode.mode == 'translator':
        await translator_next(update,context,message)
    elif  bot_mode.mode == 'talk':
        await active_talk(update,context,message)
    else:
        logging.info("Received message: %s",message)

# ===============================bot main code block===========================================

chat_gpt = ChatGptService(credentials.ChatGPT_TOKEN)
app = ApplicationBuilder().token(credentials.BOT_TOKEN).build()

app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler('quiz', quiz))
app.add_handler(CommandHandler('translator', translator))
app.add_handler(CommandHandler('image', image_recognition))

app.add_handler(CallbackQueryHandler(talk_buttons, pattern='^talk_'))
app.add_handler(CallbackQueryHandler(quiz_buttons, pattern='^quiz_'))
app.add_handler(CallbackQueryHandler(translator_buttons, pattern='^translator_'))
app.add_handler(CallbackQueryHandler(image_buttons, pattern='^image_'))
app.add_handler(CallbackQueryHandler(gpt_buttons, pattern='^gpt_'))
app.add_handler(CallbackQueryHandler(random_buttons,pattern='^random_'))

app.add_handler(MessageHandler(filters.TEXT, message_handler))
app.add_handler(MessageHandler(filters.PHOTO, photo_handler))

app.run_polling()



